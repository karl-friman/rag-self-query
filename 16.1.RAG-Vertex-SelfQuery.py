# -*- coding: utf-8 -*-
"""Copy of YT LangChain RAG tips and Tricks 01 - Self Query.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDYbCfGVMs4pHmqlmOtLr3ukCSc1kfXD
"""
import os
import constants
import logging
from typing import Any, Dict, List, Mapping, Optional
from langchain.llms import OpenAI

from pydantic import Extra, Field, root_validator
from langchain.chat_models import ChatOpenAI
from langchain.callbacks.manager import CallbackManagerForLLMRun
from langchain.llms import VertexAI

from langchain.llms.utils import enforce_stop_tokens
from langchain.utils import get_from_dict_or_env
from prettytable import PrettyTable
from termcolor import colored

os.environ["OPENAI_API_KEY"] = constants.OPENAI_API_KEY

from langchain.schema import Document
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import Chroma
from langchain.document_loaders.csv_loader import CSVLoader

# import langchain
# langchain.verbose = True
# langchain.debug = True

embeddings = OpenAIEmbeddings()

"""## Formatting and printing results"""


def print_documents(docs):
    table = PrettyTable()
    table.field_names = [
        "ID",
        "Age",
        "Curriculum Year",
        "Gender",
        "Mother Tongue",
        "Partnership Status",
        "Job Status",
        "Study Hours",
        "Health Satisfaction",
        "Psychotherapy",
        "Empathy Score",
        "Cognitive Empathy",
        "Affective Empathy",
        "AMSP Score",
        "Correct Responses",
        "CES-D Score",
        "STAI Score",
        "MBI Emotional Exhaustion",
        "MBI Cynicism",
        "MBI Academic Efficacy",
    ]

    for doc in docs:
        table.add_row(
            [
                colored(doc.metadata["id"], "red"),
                doc.metadata["age"],
                doc.metadata["year"],
                doc.metadata["sex"],
                doc.metadata["glang"],
                doc.metadata["part"],
                doc.metadata["job"],
                doc.metadata["stud_h"],
                doc.metadata["health"],
                doc.metadata["psyt"],
                doc.metadata["jspe"],
                doc.metadata["qcae_cog"],
                doc.metadata["qcae_aff"],
                doc.metadata["amsp"],
                doc.metadata["erec_mean"],
                doc.metadata["cesd"],
                doc.metadata["stai_t"],
                doc.metadata["mbi_ex"],
                doc.metadata["mbi_cy"],
                doc.metadata["mbi_ea"],
            ]
        )
    print(table)


import csv


def load_csv_to_documents(file_path):
    documents = []
    with open(file_path, mode="r", encoding="utf-8") as file:
        reader = csv.DictReader(file)
        for row in reader:
            # Convert all values to strings for consistency
            metadata = {k: str(v) for k, v in row.items()}
            # Create a document; page_content can be a placeholder or constructed from data
            doc = Document(page_content="Participant data", metadata=metadata)
            documents.append(doc)
    return documents


# Use the function to load documents
# loader = CSVLoader(file_path="./medical_data/DataCarrard_et_al._2022_MedTeach.csv", source_column="id")
# docs = loader.load()
docs = load_csv_to_documents("./medical_data/DataCarrard_et_al._2022_MedTeach.csv")

vectorstore = Chroma.from_documents(docs, embeddings)
print("vectorstore", vectorstore)

"""## Creating our self-querying retriever"""

from langchain.retrievers.self_query.base import SelfQueryRetriever
from langchain.chains.query_constructor.base import AttributeInfo

metadata_field_info = [
    AttributeInfo(
        name="id",
        description="Participants ID number",
        type="string",
    ),
    AttributeInfo(
        name="age",
        description="Age at questionnaire 20-21",
        type="numeric",
    ),
    AttributeInfo(
        name="year",
        description="Curriculum year: In which curriculum year are you?",
        type="1=Bmed1; 2=Bmed2; 3=Bmed3; 4=Mmed1; 5=Mmed2; 6=Mmed3",
    ),
    AttributeInfo(
        name="sex",
        description="Gender: To which gender do you identify the most?",
        type="1=Man; 2=Woman; 3=Non-binary",
    ),
    AttributeInfo(
        name="glang",
        description="Mother tongue: What is your mother tongue?",
        type="1=French; 15=German; 20=English; ...; 121=Other",  # Abbreviated for brevity
    ),
    AttributeInfo(
        name="part",
        description="Partnership status: Do you have a partner?",
        type="0=No; 1=Yes",
    ),
    AttributeInfo(
        name="job",
        description="Having a job: Do you have a paid job?",
        type="0=No; 1=Yes",
    ),
    AttributeInfo(
        name="stud_h",
        description="Hours of study per week: On average, how many hours per week do you study on top of courses?",
        type="numeric",
    ),
    AttributeInfo(
        name="health",
        description="Satisfaction with health: How satisfied are you with your health?",
        type="1=Very dissatisfied; 2=Dissatisfied; ...; 5=Very satisfied",
    ),
    AttributeInfo(
        name="psyt",
        description="Psychotherapy last year: Have you consulted a psychotherapist or a psychiatrist for your health in the last 12 months?",
        type="0=No; 1=Yes",
    ),
    AttributeInfo(
        name="jspe",
        description="JSPE total empathy score",
        type="numeric",
    ),
    AttributeInfo(
        name="qcae_cog",
        description="QCAE Cognitive empathy score",
        type="numeric",
    ),
    AttributeInfo(
        name="qcae_aff",
        description="QCAE Affective empathy score",
        type="numeric",
    ),
    AttributeInfo(
        name="amsp",
        description="AMSP total score",
        type="numeric",
    ),
    AttributeInfo(
        name="erec_mean",
        description="GERT: Mean value of correct responses",
        type="numeric",
    ),
    AttributeInfo(
        name="cesd",
        description="CES-D total score",
        type="numeric",
    ),
    AttributeInfo(
        name="stai_t",
        description="STAI score",
        type="numeric",
    ),
    AttributeInfo(
        name="mbi_ex",
        description="MBI Emotional Exhaustion",
        type="numeric",
    ),
    AttributeInfo(
        name="mbi_cy",
        description="MBI Cynicism",
        type="numeric",
    ),
    AttributeInfo(
        name="mbi_ea",
        description="MBI Academic Efficacy",
        type="numeric",
    ),
]
document_content_description = "Participant data"
# Assuming 'document_contents' is a list of the content of each document
document_contents = [doc.page_content for doc in docs]

llm_google = VertexAI(model="text-unicorn")
llm_openai = ChatOpenAI(model="gpt-3.5-turbo")
retriever = SelfQueryRetriever.from_llm(
    llm_google,
    vectorstore,
    document_content_description,
    metadata_field_info,
    verbose=True,
)


def print_query_and_documents(query, retriever):
    print("Q:", query)
    print_documents(retriever.get_relevant_documents(query))


queries = [
    "Show data for participants aged 20",
    "Show data for participants aged above 18 and below 20",
    "Show data for participants aged above 20 and mbi_ex higher than 10",
]

for q in queries:
    print_query_and_documents(q, retriever)
